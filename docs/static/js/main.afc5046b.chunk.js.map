{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleChangeText","useCallback","value","target","handleSubmit","e","preventDefault","trim","length","cat","onSubmit","placeholder","type","onChange","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","text","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAItCC,EAAmBC,uBAAY,gBAAWC,EAAX,EAAEC,OAASD,MAAX,OAAuBH,EAAcG,KAAQ,IAE5EE,EAAeH,uBAAY,SAACI,GAC9BA,EAAEC,iBACER,EAAWS,OAAOC,OAAS,IAC3BZ,GAAc,SAAAa,GAAG,OAAKX,GAAL,mBAAoBW,OACrCV,EAAc,OAEnB,CAACD,EAAYF,IAEhB,OACI,mCACA,sBAAMc,SAAUN,EAAhB,SACI,uBAAOO,YAAY,YAAYC,KAAK,OAAOV,MAAOJ,EAAYe,SAAUb,S,+BCpBvEc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCkBLO,EAfK,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAOV,EAAc,EAAdA,IAAc,EAATS,GAC/B,OACQ,sBAAKK,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCoBLO,EAtBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAAEyB,KAAM,GAAIa,SAAS,IADlB,mBAC/BC,EAD+B,KACxBC,EADwB,KAYtC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDRyBK,CAAa1B,GAAhCa,EAFiB,EAEvBN,KAAca,EAFS,EAETA,QAKrB,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEE5CgB,MAff,WAAwB,MAEgB7C,mBAAS,CAAC,cAF1B,mBAEb8C,EAFa,KAED/C,EAFC,KAGpB,OACG,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK+C,EAAWnB,KAAI,SAACoB,GAAD,OAAU,cAAC,EAAD,CAAoB7B,SAAU6B,GAAhBA,YCRvDC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.afc5046b.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChangeText = useCallback(({target: {value}}) => setInputValue(value), []);\r\n\r\n    const handleSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cat => [inputValue, ...cat]);\r\n            setInputValue('');\r\n        }\r\n    }, [inputValue, setCategories]);\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n            <input placeholder=\"Search...\" type=\"text\" value={inputValue} onChange={handleChangeText} />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=3h0ZSmmL8NSopDkQb8cZposiGYQGAwZd&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);;\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({ title, url, id }) => {\r\n    return (\r\n            <div className=\"card animate__animated animate__fadeIn\">\r\n                <img src={url} alt={title} />\r\n                <p>{title}</p>\r\n            </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    img: PropTypes.string,\r\n    title: PropTypes.string,\r\n    id: PropTypes.string,\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {images.map((img) => <GifGridItem key={img.id} {...img} />)}\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({ data: [], loading: true });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { Fragment, useState } from 'react'\r\nimport {AddCategory} from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid'\r\n\r\nfunction GifExpertApp() {\r\n    //const categories = ['One punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One punch']);\r\n    return (\r\n       <Fragment>\r\n           <h2>GifExpertApp</h2>\r\n           <AddCategory setCategories={setCategories} />\r\n           <hr/>\r\n           <ol>\r\n               {categories.map((text) => <GifGrid key={text} category={text} />)}\r\n           </ol>\r\n       </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}